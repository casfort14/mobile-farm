local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local VirtualUser = game:GetService("VirtualUser")

local LocalPlayer = Players.LocalPlayer
local isScriptActive = false
local monitoringTasks = {}

-- Wait for game to load
if not game:IsLoaded() then
    game.Loaded:Wait()
end

-- Ensure LocalPlayer is loaded
while not LocalPlayer do
    task.wait()
    LocalPlayer = Players.LocalPlayer
end

-- GUI Creation
local function createGui()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "CombinedScriptGui"
    screenGui.Parent = CoreGui
    screenGui.ResetOnSpawn = false

    local mainFrame = Instance.new("Frame")
    mainFrame.Size = UDim2.new(0, 250, 0, 150)
    mainFrame.Position = UDim2.new(0.5, -125, 0.5, -75)
    mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    mainFrame.BorderSizePixel = 0
    mainFrame.Parent = screenGui

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 10)
    corner.Parent = mainFrame

    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1, 0, 0, 40)
    titleLabel.Position = UDim2.new(0, 0, 0, 0)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = "Script Control Panel"
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.TextSize = 18
    titleLabel.Parent = mainFrame

    local toggleButton = Instance.new("TextButton")
    toggleButton.Name = "ToggleButton"
    toggleButton.Size = UDim2.new(0, 180, 0, 50)
    toggleButton.Position = UDim2.new(0.5, -90, 0.5, 10)
    toggleButton.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
    toggleButton.Text = "Start Script"
    toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    toggleButton.Font = Enum.Font.GothamBold
    toggleButton.TextSize = 16
    toggleButton.Parent = mainFrame

    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0, 8)
    buttonCorner.Parent = toggleButton

    -- Draggable functionality
    local dragging, dragInput, dragStart, startPos
    mainFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    mainFrame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then
            local delta = input.Position - dragStart
            mainFrame.Position = UDim2.new(
                startPos.X.Scale, startPos.X.Offset + delta.X,
                startPos.Y.Scale, startPos.Y.Offset + delta.Y
            )
        end
    end)

    -- Button animation
    toggleButton.MouseEnter:Connect(function()
        TweenService:Create(toggleButton, TweenInfo.new(0.2), {
            BackgroundColor3 = Color3.fromRGB(0, 200, 255)
        }):Play()
    end)

    toggleButton.MouseLeave:Connect(function()
        TweenService:Create(toggleButton, TweenInfo.new(0.2), {
            BackgroundColor3 = Color3.fromRGB(0, 170, 255)
        }):Play()
    end)

    return toggleButton, screenGui
end

-- ResetIfUserIdDies Module
local function resetIfUserIdDies()
    local targetUserId = 8424067766
    local function nuclearReset()
        local storedPosition = nil
        if LocalPlayer.Character then
            local root = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            if root then
                storedPosition = root.Position
            end
            local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
            if humanoid then
                humanoid.Health = 0
                task.wait(0.1)
            end
            pcall(function()
                LocalPlayer.Character:BreakJoints()
                task.wait(0.1)
            end)
        end
        task.wait(1)
        if LocalPlayer.Character and storedPosition then
            local root = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            if root then
                root.Position = storedPosition
            end
        end
    end

    local function monitorTargetPlayer()
        while isScriptActive do
            local targetPlayer = Players:GetPlayerByUserId(targetUserId)
            if targetPlayer and targetPlayer.Character then
                local humanoid = targetPlayer.Character:FindFirstChild("Humanoid")
                if humanoid and humanoid.Health <= 0 then
                    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") and LocalPlayer.Character.Humanoid.Health > 0 then
                        nuclearReset()
                    end
                    repeat task.wait() until targetPlayer.Character and targetPlayer.Character:FindFirstChild("Humanoid")
                end
            end
            task.wait(0.05)
        end
    end
    return monitorTargetPlayer
end

-- SaitamaMacro Module
local function saitamaMacro()
    local shoveArgs
    local processedHumanoids = {}
    local defeatedCount = 0

    local function resetPlayer()
        task.delay(1, function()
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
                LocalPlayer.Character.Humanoid.Health = 0
                print("Player reset after shove!")
            end
        end)
    end

    local function countDefeatedHumanoids()
        if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then return end
        local region = Region3.new(
            LocalPlayer.Character.HumanoidRootPart.Position - Vector3.new(20, 20, 20),
            LocalPlayer.Character.HumanoidRootPart.Position + Vector3.new(20, 20, 20)
        )
        local parts = workspace:FindPartsInRegion3(region, nil, math.huge)
        for _, part in ipairs(parts) do
            local humanoid = part.Parent:FindFirstChildOfClass("Humanoid")
            if humanoid and humanoid.Health <= 0 and not processedHumanoids[humanoid] then
                defeatedCount = defeatedCount + 1
                processedHumanoids[humanoid] = true
                print("Humanoid defeated! Count: " .. defeatedCount)
            end
        end
    end

    local function spamShove(remoteEvent)
        print("Spamming 'Shove' for 3 seconds!")
        local startTime = tick()
        while tick() - startTime < 3 do
            remoteEvent:FireServer(unpack(shoveArgs))
            task.wait(0.3)
        end
        print("Shove spam finished!")
        resetPlayer()
    end

    local function setupCharacter(character)
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart", 10)
        local remoteEvent = character:WaitForChild("Communicate", 10)
        local backpack = LocalPlayer:WaitForChild("Backpack", 10)
        if not humanoidRootPart or not remoteEvent or not backpack then
            warn("Missing essential components for SaitamaMacro!")
            return
        end
        local shoveTool = backpack:FindFirstChild("Shove") or backpack.ChildAdded:Wait()
        while shoveTool.Name ~= "Shove" do
            shoveTool = backpack.ChildAdded:Wait()
        end
        shoveArgs = {
            [1] = {
                ["Tool"] = shoveTool,
                ["Goal"] = "Console Move",
                ["ToolName"] = "Shove"
            }
        }
        task.spawn(function()
            while isScriptActive and character and character.Parent do
                countDefeatedHumanoids()
                if defeatedCount >= 8 then
                    spamShove(remoteEvent)
                    defeatedCount = 0
                    table.clear(processedHumanoids)
                end
                task.wait(1)
            end
        end)
    end

    LocalPlayer.CharacterAdded:Connect(setupCharacter)
    if LocalPlayer.Character then
        setupCharacter(LocalPlayer.Character)
    end
end

-- JoinLogger Module
local function joinLogger()
    local LogFile = "workspace/players_log.txt"
    local function logToFile(text)
        local timestamp = os.date("[%Y-%m-%d %H:%M:%S] ")
        local formattedText = timestamp .. text .. "\n"
        writefile(LogFile, (isfile(LogFile) and readfile(LogFile) or "") .. formattedText)
        print(formattedText)
    end

    Players.PlayerAdded:Connect(function(player)
        logToFile("Player Joined: " .. player.Name .. " (" .. player.UserId .. ")")
    end)

    Players.PlayerRemoving:Connect(function(player)
        logToFile("Player Left: " .. player.Name .. " (" .. player.UserId .. ")")
    end)

    local function reapplyLogger()
        logToFile("üîÅ Script Reapplied After Reset")
        LocalPlayer.CharacterAdded:Connect(function()
            logToFile("‚úÖ Character Respawned: " .. LocalPlayer.Name)
        end)
    end
    reapplyLogger()
end

-- PossibleMacroWIP Module
local function possibleMacro()
    local allowedUserIds = {
        7707295397, 7707283160, 8181887881, 7707159118, 7707300257, 7707308258
    }
    if not table.find(allowedUserIds, LocalPlayer.UserId) then
        warn("Unauthorized user. Macro will not run.")
        return
    end

    local shoveArgs
    local processedHumanoids = {}
    local defeatedCount = 0

    local function resetPlayer()
        task.delay(1, function()
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
                LocalPlayer.Character.Humanoid.Health = 0
                print("Player reset after shove!")
            end
        end)
    end

    local function countDefeatedHumanoids()
        if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then return end
        local region = Region3.new(
            LocalPlayer.Character.HumanoidRootPart.Position - Vector3.new(20, 20, 20),
            LocalPlayer.Character.HumanoidRootPart.Position + Vector3.new(20, 20, 20)
        )
        local parts = workspace:FindPartsInRegion3(region, nil, math.huge)
        for _, part in ipairs(parts) do
            local humanoid = part.Parent:FindFirstChildOfClass("Humanoid")
            if humanoid and humanoid.Health <= 0 and not processedHumanoids[humanoid] then
                defeatedCount = defeatedCount + 1
                processedHumanoids[humanoid] = true
                print("Humanoid defeated! Count: " .. defeatedCount)
            end
        end
    end

    local function spamShove(remoteEvent)
        print("Spamming 'Shove' for 2 seconds!")
        local startTime = tick()
        while tick() - startTime < 2 do
            remoteEvent:FireServer(unpack(shoveArgs))
            task.wait(0.1)
        end
        print("Shove spam finished!")
        resetPlayer()
    end

    local function setupCharacter(character)
        local remoteEvent = character:WaitForChild("Communicate")
        shoveArgs = {
            [1] = {
                ["Tool"] = LocalPlayer:WaitForChild("Backpack"):WaitForChild("Shove"),
                ["Goal"] = "Console Move",
                ["ToolName"] = "Shove"
            }
        }
        task.spawn(function()
            while isScriptActive and character and character.Parent do
                countDefeatedHumanoids()
                if defeatedCount >= 1 then
                    spamShove(remoteEvent)
                    defeatedCount = 0
                    table.clear(processedHumanoids)
                end
                task.wait(1)
            end)
        end)
    end

    LocalPlayer.CharacterAdded:Connect(setupCharacter)
    if LocalPlayer.Character then
        setupCharacter(LocalPlayer.Character)
    end
end

-- AutoGameModChecker Module
local function autoGameModChecker()
    local moderatorIDs = {
        268312397, 2627262431, 82610981, 292707170, 449404798, 221681529, 41022405,
        56721213, 38307780, 2039323684, 1041867508, 7340338226, 1001242712, 2992126732,
        3235334930, 8172452618, 8182327909, 6075366524, 8217675225, 5554257146,
        3629864555, 7753754636, 4354859764, 7819468433, 8073683106, 6085229191,
        8254372886, 3027915029, 8100644723, 8164557160, 5500012275
    }
    local checkInterval = 0.1

    local function checkForModerators()
        for _, player in pairs(Players:GetPlayers()) do
            if table.find(moderatorIDs, player.UserId) then
                LocalPlayer:Kick("A game moderator (" .. player.Name .. ") has joined your game.")
                break
            end
        end
    end

    task.spawn(function()
        while is ScriptActive do
            checkForModerators()
            task.wait(checkInterval)
        end
    end)

    LocalPlayer.CharacterAdded:Connect(function()
        task.wait(1)
        task.spawn(function()
            while isScriptActive do
                checkForModerators()
                task.wait(checkInterval)
            end
        end)
    end)
end

-- KillLimit Module
local function killLimit()
    local leaderstats
    repeat
        leaderstats = LocalPlayer:FindFirstChild("leaderstats")
        task.wait()
    until leaderstats

    local kills
    repeat
        kills = leaderstats:FindFirstChild("Kills")
        task.wait()
    until kills

    task.spawn(function()
        while isScriptActive do
            print("Current Kills: " .. kills.Value)
            if kills.Value >= 40000 then
                print("Kill threshold reached! Closing game...")
                game:Shutdown()
                return
            end
            task.wait(1)
        end
    end)
end

-- FPS Module
local function setFps()
    setfpscap(10)
end

-- AntiAfk Module
local function antiAfk()
    pcall(function()
        LocalPlayer.Idled:Connect(function()
            VirtualUser:CaptureController()
            VirtualUser:ClickButton2(Vector2.new())
        end)
        print("AFK on")
    end)
end

-- Noclip Module
local function noclip()
    local function enableNoclip()
        local character = LocalPlayer.Character
        if character then
            for _, part in pairs(character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = false
                end
            end
        end
    end

    task.spawn(function()
        while isScriptActive do
            enableNoclip()
            task.wait(0.01)
        end
    end)
end

-- SpawnPointForTsbAlts Module
local function spawnPoint()
    local targetPosition = Vector3.new(438.30792236328125, 439.51055908203125, -375.7077331542969)
    task.spawn(function()
        while isScriptActive do
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
            end
            task.wait(0.01)
        end
    end)
end

-- Main Script Control
local toggleButton, screenGui = createGui()

toggleButton.MouseButton1Click:Connect(function()
    isScriptActive = not isScriptActive
    toggleButton.Text = isScriptActive and "Stop Script" or "Start Script"
    TweenService:Create(toggleButton, TweenInfo.new(0.2), {
        BackgroundColor3 = isScriptActive and Color3.fromRGB(255, 50, 50) or Color3.fromRGB(0, 170, 255)
    }):Play()

    if isScriptActive then
        -- Start all modules
        monitoringTasks = {
            resetIfUserIdDies = task.spawn(resetIfUserIdDies()),
            saitamaMacro = task.spawn(saitamaMacro),
            joinLogger = task.spawn(joinLogger),
            possibleMacro = task.spawn(possibleMacro),
            autoGameModChecker = task.spawn(autoGameModChecker),
            killLimit = task.spawn(killLimit),
            setFps = task.spawn(setFps),
            antiAfk = task.spawn(antiAfk),
            noclip = task.spawn(noclip),
            spawnPoint = task.spawn(spawnPoint)
        }
    else
        -- Stop all tasks
        for _, taskInstance in pairs(monitoringTasks) do
            if taskInstance then
                task.cancel(taskInstance)
            end
        end
        monitoringTasks = {}
    end
end)

-- Cleanup on script end
game:BindToClose(function()
    isScriptActive = false
    for _, taskInstance in pairs(monitoringTasks) do
        if taskInstance then
            task.cancel(taskInstance)
        end
    end
    if screenGui then
        screenGui:Destroy()
    end
end)
